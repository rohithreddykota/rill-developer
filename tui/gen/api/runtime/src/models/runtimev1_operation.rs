/*
 * rill/runtime/v1/api.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Runtimev1Operation {
    #[serde(rename = "OPERATION_UNSPECIFIED")]
    Unspecified,
    #[serde(rename = "OPERATION_EQ")]
    Eq,
    #[serde(rename = "OPERATION_NEQ")]
    Neq,
    #[serde(rename = "OPERATION_LT")]
    Lt,
    #[serde(rename = "OPERATION_LTE")]
    Lte,
    #[serde(rename = "OPERATION_GT")]
    Gt,
    #[serde(rename = "OPERATION_GTE")]
    Gte,
    #[serde(rename = "OPERATION_OR")]
    Or,
    #[serde(rename = "OPERATION_AND")]
    And,
    #[serde(rename = "OPERATION_IN")]
    In,
    #[serde(rename = "OPERATION_NIN")]
    Nin,
    #[serde(rename = "OPERATION_LIKE")]
    Like,
    #[serde(rename = "OPERATION_NLIKE")]
    Nlike,

}

impl std::fmt::Display for Runtimev1Operation {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Unspecified => write!(f, "OPERATION_UNSPECIFIED"),
            Self::Eq => write!(f, "OPERATION_EQ"),
            Self::Neq => write!(f, "OPERATION_NEQ"),
            Self::Lt => write!(f, "OPERATION_LT"),
            Self::Lte => write!(f, "OPERATION_LTE"),
            Self::Gt => write!(f, "OPERATION_GT"),
            Self::Gte => write!(f, "OPERATION_GTE"),
            Self::Or => write!(f, "OPERATION_OR"),
            Self::And => write!(f, "OPERATION_AND"),
            Self::In => write!(f, "OPERATION_IN"),
            Self::Nin => write!(f, "OPERATION_NIN"),
            Self::Like => write!(f, "OPERATION_LIKE"),
            Self::Nlike => write!(f, "OPERATION_NLIKE"),
        }
    }
}

impl Default for Runtimev1Operation {
    fn default() -> Runtimev1Operation {
        Self::Unspecified
    }
}


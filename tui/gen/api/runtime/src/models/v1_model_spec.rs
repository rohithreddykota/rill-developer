/*
 * rill/runtime/v1/api.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1ModelSpec {
    #[serde(rename = "refreshSchedule", skip_serializing_if = "Option::is_none")]
    pub refresh_schedule: Option<Box<models::V1Schedule>>,
    #[serde(rename = "timeoutSeconds", skip_serializing_if = "Option::is_none")]
    pub timeout_seconds: Option<i64>,
    #[serde(rename = "incremental", skip_serializing_if = "Option::is_none")]
    pub incremental: Option<bool>,
    #[serde(rename = "incrementalStateResolver", skip_serializing_if = "Option::is_none")]
    pub incremental_state_resolver: Option<String>,
    #[serde(rename = "incrementalStateResolverProperties", skip_serializing_if = "Option::is_none")]
    pub incremental_state_resolver_properties: Option<serde_json::Value>,
    #[serde(rename = "partitionsResolver", skip_serializing_if = "Option::is_none")]
    pub partitions_resolver: Option<String>,
    #[serde(rename = "partitionsResolverProperties", skip_serializing_if = "Option::is_none")]
    pub partitions_resolver_properties: Option<serde_json::Value>,
    #[serde(rename = "partitionsWatermarkField", skip_serializing_if = "Option::is_none")]
    pub partitions_watermark_field: Option<String>,
    #[serde(rename = "partitionsConcurrencyLimit", skip_serializing_if = "Option::is_none")]
    pub partitions_concurrency_limit: Option<i64>,
    #[serde(rename = "inputConnector", skip_serializing_if = "Option::is_none")]
    pub input_connector: Option<String>,
    #[serde(rename = "inputProperties", skip_serializing_if = "Option::is_none")]
    pub input_properties: Option<serde_json::Value>,
    /// stage_connector is optional.
    #[serde(rename = "stageConnector", skip_serializing_if = "Option::is_none")]
    pub stage_connector: Option<String>,
    #[serde(rename = "stageProperties", skip_serializing_if = "Option::is_none")]
    pub stage_properties: Option<serde_json::Value>,
    #[serde(rename = "outputConnector", skip_serializing_if = "Option::is_none")]
    pub output_connector: Option<String>,
    #[serde(rename = "outputProperties", skip_serializing_if = "Option::is_none")]
    pub output_properties: Option<serde_json::Value>,
    #[serde(rename = "trigger", skip_serializing_if = "Option::is_none")]
    pub trigger: Option<bool>,
    #[serde(rename = "triggerFull", skip_serializing_if = "Option::is_none")]
    pub trigger_full: Option<bool>,
}

impl V1ModelSpec {
    pub fn new() -> V1ModelSpec {
        V1ModelSpec {
            refresh_schedule: None,
            timeout_seconds: None,
            incremental: None,
            incremental_state_resolver: None,
            incremental_state_resolver_properties: None,
            partitions_resolver: None,
            partitions_resolver_properties: None,
            partitions_watermark_field: None,
            partitions_concurrency_limit: None,
            input_connector: None,
            input_properties: None,
            stage_connector: None,
            stage_properties: None,
            output_connector: None,
            output_properties: None,
            trigger: None,
            trigger_full: None,
        }
    }
}


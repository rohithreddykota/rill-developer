/*
 * rill/runtime/v1/api.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1ModelState {
    /// executor_connector is the ModelExecutor that produced the model's result.
    #[serde(rename = "executorConnector", skip_serializing_if = "Option::is_none")]
    pub executor_connector: Option<String>,
    /// result_connector is the connector where the model's result is stored.
    #[serde(rename = "resultConnector", skip_serializing_if = "Option::is_none")]
    pub result_connector: Option<String>,
    /// result_properties are returned by the executor and contains metadata about the result.
    #[serde(rename = "resultProperties", skip_serializing_if = "Option::is_none")]
    pub result_properties: Option<serde_json::Value>,
    /// result_table contains the model's result table for SQL models. It is a convenience field that can also be derived from result_properties.
    #[serde(rename = "resultTable", skip_serializing_if = "Option::is_none")]
    pub result_table: Option<String>,
    /// spec_hash is a hash of those parts of the spec that affect the model's result.
    #[serde(rename = "specHash", skip_serializing_if = "Option::is_none")]
    pub spec_hash: Option<String>,
    /// refs_hash is a hash of the model's refs current state. It is used to determine if the model's refs have changed.
    #[serde(rename = "refsHash", skip_serializing_if = "Option::is_none")]
    pub refs_hash: Option<String>,
    /// refreshed_on is the time the model was last executed.
    #[serde(rename = "refreshedOn", skip_serializing_if = "Option::is_none")]
    pub refreshed_on: Option<String>,
    /// incremental_state contains the result of the most recent invocation of the model's incremental state resolver.
    #[serde(rename = "incrementalState", skip_serializing_if = "Option::is_none")]
    pub incremental_state: Option<serde_json::Value>,
    #[serde(rename = "incrementalStateSchema", skip_serializing_if = "Option::is_none")]
    pub incremental_state_schema: Option<Box<models::V1StructType>>,
    /// partitions_model_id is a randomly generated ID used to store the model's partitions in the CatalogStore.
    #[serde(rename = "partitionsModelId", skip_serializing_if = "Option::is_none")]
    pub partitions_model_id: Option<String>,
    /// partitions_have_errors is true if one or more partitions failed to execute.
    #[serde(rename = "partitionsHaveErrors", skip_serializing_if = "Option::is_none")]
    pub partitions_have_errors: Option<bool>,
}

impl V1ModelState {
    pub fn new() -> V1ModelState {
        V1ModelState {
            executor_connector: None,
            result_connector: None,
            result_properties: None,
            result_table: None,
            spec_hash: None,
            refs_hash: None,
            refreshed_on: None,
            incremental_state: None,
            incremental_state_schema: None,
            partitions_model_id: None,
            partitions_have_errors: None,
        }
    }
}


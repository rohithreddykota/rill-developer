/*
 * rill/runtime/v1/api.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1Connector {
    /// Type of the connector. One of the infra driver supported.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "config", skip_serializing_if = "Option::is_none")]
    pub config: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "templatedProperties", skip_serializing_if = "Option::is_none")]
    pub templated_properties: Option<Vec<String>>,
    #[serde(rename = "provision", skip_serializing_if = "Option::is_none")]
    pub provision: Option<bool>,
    #[serde(rename = "provisionArgs", skip_serializing_if = "Option::is_none")]
    pub provision_args: Option<serde_json::Value>,
    #[serde(rename = "configFromVariables", skip_serializing_if = "Option::is_none")]
    pub config_from_variables: Option<std::collections::HashMap<String, String>>,
}

impl V1Connector {
    pub fn new() -> V1Connector {
        V1Connector {
            r#type: None,
            name: None,
            config: None,
            templated_properties: None,
            provision: None,
            provision_args: None,
            config_from_variables: None,
        }
    }
}


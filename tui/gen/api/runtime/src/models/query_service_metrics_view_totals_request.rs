/*
 * rill/runtime/v1/api.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryServiceMetricsViewTotalsRequest {
    #[serde(rename = "measureNames", skip_serializing_if = "Option::is_none")]
    pub measure_names: Option<Vec<String>>,
    #[serde(rename = "timeStart", skip_serializing_if = "Option::is_none")]
    pub time_start: Option<String>,
    #[serde(rename = "timeEnd", skip_serializing_if = "Option::is_none")]
    pub time_end: Option<String>,
    #[serde(rename = "where", skip_serializing_if = "Option::is_none")]
    pub r#where: Option<Box<models::V1Expression>>,
    /// Optional. If both where and where_sql are set, both will be applied with an AND between them.
    #[serde(rename = "whereSql", skip_serializing_if = "Option::is_none")]
    pub where_sql: Option<String>,
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<Box<models::V1MetricsViewFilter>>,
}

impl QueryServiceMetricsViewTotalsRequest {
    pub fn new() -> QueryServiceMetricsViewTotalsRequest {
        QueryServiceMetricsViewTotalsRequest {
            measure_names: None,
            time_start: None,
            time_end: None,
            r#where: None,
            where_sql: None,
            priority: None,
            filter: None,
        }
    }
}


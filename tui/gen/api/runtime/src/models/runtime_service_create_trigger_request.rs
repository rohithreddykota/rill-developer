/*
 * rill/runtime/v1/api.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RuntimeServiceCreateTriggerRequest {
    /// Resources to trigger. See RefreshTriggerSpec for details.
    #[serde(rename = "resources", skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<models::V1ResourceName>>,
    /// Models to trigger. Unlike resources, this supports advanced configuration of the refresh trigger.
    #[serde(rename = "models", skip_serializing_if = "Option::is_none")]
    pub models: Option<Vec<models::V1RefreshModelTrigger>>,
    /// Parser is a convenience flag to trigger the global project parser. Triggering the project parser ensures a pull of the repository and a full parse of all files.
    #[serde(rename = "parser", skip_serializing_if = "Option::is_none")]
    pub parser: Option<bool>,
    /// Convenience flag to trigger all sources and models.
    #[serde(rename = "allSourcesModels", skip_serializing_if = "Option::is_none")]
    pub all_sources_models: Option<bool>,
    /// Convenience flag to trigger all sources and models. Will trigger models with RefreshModelTrigger.full set to true.
    #[serde(rename = "allSourcesModelsFull", skip_serializing_if = "Option::is_none")]
    pub all_sources_models_full: Option<bool>,
}

impl RuntimeServiceCreateTriggerRequest {
    pub fn new() -> RuntimeServiceCreateTriggerRequest {
        RuntimeServiceCreateTriggerRequest {
            resources: None,
            models: None,
            parser: None,
            all_sources_models: None,
            all_sources_models_full: None,
        }
    }
}


/*
 * rill/runtime/v1/api.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// V1FieldSelector : FieldSelector describes logic for selecting a list of fields. It is useful for dynamically evaluating fields when the list of potential fields is not known at parse time.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1FieldSelector {
    /// Invert the result such that all fields *except* the selected fields are returned.
    #[serde(rename = "invert", skip_serializing_if = "Option::is_none")]
    pub invert: Option<bool>,
    /// Select all fields.
    #[serde(rename = "all", skip_serializing_if = "Option::is_none")]
    pub all: Option<bool>,
    #[serde(rename = "fields", skip_serializing_if = "Option::is_none")]
    pub fields: Option<Box<models::V1StringListValue>>,
    /// Select fields by a regular expression.
    #[serde(rename = "regex", skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    /// Select fields by a DuckDB SQL SELECT expression. For example \"* EXCLUDE (city)\".
    #[serde(rename = "duckdbExpression", skip_serializing_if = "Option::is_none")]
    pub duckdb_expression: Option<String>,
}

impl V1FieldSelector {
    /// FieldSelector describes logic for selecting a list of fields. It is useful for dynamically evaluating fields when the list of potential fields is not known at parse time.
    pub fn new() -> V1FieldSelector {
        V1FieldSelector {
            invert: None,
            all: None,
            fields: None,
            regex: None,
            duckdb_expression: None,
        }
    }
}


/*
 * rill/runtime/v1/api.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1ResourceMeta {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<Box<models::V1ResourceName>>,
    #[serde(rename = "refs", skip_serializing_if = "Option::is_none")]
    pub refs: Option<Vec<models::V1ResourceName>>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<Box<models::V1ResourceName>>,
    #[serde(rename = "filePaths", skip_serializing_if = "Option::is_none")]
    pub file_paths: Option<Vec<String>>,
    #[serde(rename = "hidden", skip_serializing_if = "Option::is_none")]
    pub hidden: Option<bool>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "specVersion", skip_serializing_if = "Option::is_none")]
    pub spec_version: Option<String>,
    #[serde(rename = "stateVersion", skip_serializing_if = "Option::is_none")]
    pub state_version: Option<String>,
    #[serde(rename = "createdOn", skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(rename = "specUpdatedOn", skip_serializing_if = "Option::is_none")]
    pub spec_updated_on: Option<String>,
    #[serde(rename = "stateUpdatedOn", skip_serializing_if = "Option::is_none")]
    pub state_updated_on: Option<String>,
    #[serde(rename = "deletedOn", skip_serializing_if = "Option::is_none")]
    pub deleted_on: Option<String>,
    #[serde(rename = "reconcileStatus", skip_serializing_if = "Option::is_none")]
    pub reconcile_status: Option<models::V1ReconcileStatus>,
    #[serde(rename = "reconcileError", skip_serializing_if = "Option::is_none")]
    pub reconcile_error: Option<String>,
    #[serde(rename = "reconcileOn", skip_serializing_if = "Option::is_none")]
    pub reconcile_on: Option<String>,
    #[serde(rename = "renamedFrom", skip_serializing_if = "Option::is_none")]
    pub renamed_from: Option<Box<models::V1ResourceName>>,
}

impl V1ResourceMeta {
    pub fn new() -> V1ResourceMeta {
        V1ResourceMeta {
            name: None,
            refs: None,
            owner: None,
            file_paths: None,
            hidden: None,
            version: None,
            spec_version: None,
            state_version: None,
            created_on: None,
            spec_updated_on: None,
            state_updated_on: None,
            deleted_on: None,
            reconcile_status: None,
            reconcile_error: None,
            reconcile_on: None,
            renamed_from: None,
        }
    }
}


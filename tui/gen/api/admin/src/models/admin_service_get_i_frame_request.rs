/*
 * rill/admin/v1/ai.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AdminServiceGetIFrameRequest : GetIFrameRequest is the request payload for AdminService.GetIFrame.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdminServiceGetIFrameRequest {
    /// Branch to embed. If not set, the production branch is used.
    #[serde(rename = "branch", skip_serializing_if = "Option::is_none")]
    pub branch: Option<String>,
    /// TTL for the iframe's access token. If not set, defaults to 24 hours.
    #[serde(rename = "ttlSeconds", skip_serializing_if = "Option::is_none")]
    pub ttl_seconds: Option<i64>,
    /// If set, will use the attributes of the user with this ID.
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// If set, will generate attributes corresponding to a user with this email.
    #[serde(rename = "userEmail", skip_serializing_if = "Option::is_none")]
    pub user_email: Option<String>,
    /// If set, will use the provided attributes outright.
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<serde_json::Value>,
    /// Type of resource to embed. If not set, defaults to \"rill.runtime.v1.Explore\".
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// Deprecated: Alias for `type`.
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the resource to embed. This should identify a resource that is valid for embedding, such as a dashboard or component.
    #[serde(rename = "resource", skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
    /// Theme to use for the embedded resource.
    #[serde(rename = "theme", skip_serializing_if = "Option::is_none")]
    pub theme: Option<String>,
    /// Navigation denotes whether navigation between different resources should be enabled in the embed.
    #[serde(rename = "navigation", skip_serializing_if = "Option::is_none")]
    pub navigation: Option<bool>,
    /// Blob containing UI state for rendering the initial embed. Not currently supported.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// DEPRECATED: Additional parameters to set outright in the generated URL query.
    #[serde(rename = "query", skip_serializing_if = "Option::is_none")]
    pub query: Option<std::collections::HashMap<String, String>>,
}

impl AdminServiceGetIFrameRequest {
    /// GetIFrameRequest is the request payload for AdminService.GetIFrame.
    pub fn new() -> AdminServiceGetIFrameRequest {
        AdminServiceGetIFrameRequest {
            branch: None,
            ttl_seconds: None,
            user_id: None,
            user_email: None,
            attributes: None,
            r#type: None,
            kind: None,
            resource: None,
            theme: None,
            navigation: None,
            state: None,
            query: None,
        }
    }
}


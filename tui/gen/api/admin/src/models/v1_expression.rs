/*
 * rill/admin/v1/ai.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1Expression {
    #[serde(rename = "ident", skip_serializing_if = "Option::is_none")]
    pub ident: Option<String>,
    #[serde(rename = "val", skip_serializing_if = "Option::is_none")]
    pub val: Option<serde_json::Value>,
    #[serde(rename = "cond", skip_serializing_if = "Option::is_none")]
    pub cond: Option<Box<models::V1Condition>>,
    #[serde(rename = "subquery", skip_serializing_if = "Option::is_none")]
    pub subquery: Option<Box<models::V1Subquery>>,
}

impl V1Expression {
    pub fn new() -> V1Expression {
        V1Expression {
            ident: None,
            val: None,
            cond: None,
            subquery: None,
        }
    }
}


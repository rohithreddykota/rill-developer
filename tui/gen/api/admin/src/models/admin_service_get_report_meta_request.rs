/*
 * rill/admin/v1/ai.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdminServiceGetReportMetaRequest {
    #[serde(rename = "branch", skip_serializing_if = "Option::is_none")]
    pub branch: Option<String>,
    #[serde(rename = "report", skip_serializing_if = "Option::is_none")]
    pub report: Option<String>,
    #[serde(rename = "ownerId", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<String>,
    #[serde(rename = "executionTime", skip_serializing_if = "Option::is_none")]
    pub execution_time: Option<String>,
    #[serde(rename = "emailRecipients", skip_serializing_if = "Option::is_none")]
    pub email_recipients: Option<Vec<String>>,
}

impl AdminServiceGetReportMetaRequest {
    pub fn new() -> AdminServiceGetReportMetaRequest {
        AdminServiceGetReportMetaRequest {
            branch: None,
            report: None,
            owner_id: None,
            execution_time: None,
            email_recipients: None,
        }
    }
}


/*
 * rill/admin/v1/ai.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1AlertOptions {
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "intervalDuration", skip_serializing_if = "Option::is_none")]
    pub interval_duration: Option<String>,
    #[serde(rename = "resolver", skip_serializing_if = "Option::is_none")]
    pub resolver: Option<String>,
    #[serde(rename = "resolverProperties", skip_serializing_if = "Option::is_none")]
    pub resolver_properties: Option<serde_json::Value>,
    /// DEPRECATED: Use resolver and resolver_properties instead.
    #[serde(rename = "queryName", skip_serializing_if = "Option::is_none")]
    pub query_name: Option<String>,
    /// DEPRECATED: Use resolver and resolver_properties instead.
    #[serde(rename = "queryArgsJson", skip_serializing_if = "Option::is_none")]
    pub query_args_json: Option<String>,
    #[serde(rename = "metricsViewName", skip_serializing_if = "Option::is_none")]
    pub metrics_view_name: Option<String>,
    #[serde(rename = "renotify", skip_serializing_if = "Option::is_none")]
    pub renotify: Option<bool>,
    #[serde(rename = "renotifyAfterSeconds", skip_serializing_if = "Option::is_none")]
    pub renotify_after_seconds: Option<i64>,
    #[serde(rename = "emailRecipients", skip_serializing_if = "Option::is_none")]
    pub email_recipients: Option<Vec<String>>,
    #[serde(rename = "slackUsers", skip_serializing_if = "Option::is_none")]
    pub slack_users: Option<Vec<String>>,
    #[serde(rename = "slackChannels", skip_serializing_if = "Option::is_none")]
    pub slack_channels: Option<Vec<String>>,
    #[serde(rename = "slackWebhooks", skip_serializing_if = "Option::is_none")]
    pub slack_webhooks: Option<Vec<String>>,
    /// Annotation for the subpath of <UI host>/org/project to open for the report.
    #[serde(rename = "webOpenPath", skip_serializing_if = "Option::is_none")]
    pub web_open_path: Option<String>,
    /// Annotation for the base64-encoded UI state to open for the report.
    #[serde(rename = "webOpenState", skip_serializing_if = "Option::is_none")]
    pub web_open_state: Option<String>,
}

impl V1AlertOptions {
    pub fn new() -> V1AlertOptions {
        V1AlertOptions {
            display_name: None,
            interval_duration: None,
            resolver: None,
            resolver_properties: None,
            query_name: None,
            query_args_json: None,
            metrics_view_name: None,
            renotify: None,
            renotify_after_seconds: None,
            email_recipients: None,
            slack_users: None,
            slack_channels: None,
            slack_webhooks: None,
            web_open_path: None,
            web_open_state: None,
        }
    }
}

